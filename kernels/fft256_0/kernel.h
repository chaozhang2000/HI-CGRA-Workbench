#include"CGRA.h"
#include <iostream>
#define PI 3.1415926
#define TIMES 10
#define LEN 256
																								 
int butterfly_i[LEN*2] = {1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int butterfly_o[LEN*2] = {0};
int w[LEN] = {1024,0,1023,-25,1022,-50,1021,-75,1019,-100,1016,-125,1012,-150,1008,-175,1004,-199,999,-224,993,-248,986,-273,979,-297,972,-321,964,-344,955,-368,946,-391,936,-414,925,-437,914,-460,903,-482,890,-504,878,-526,865,-547,851,-568,837,-589,822,-609,807,-629,791,-649,775,-668,758,-687,741,-706,724,-724,706,-741,687,-758,668,-775,649,-791,629,-807,609,-822,589,-837,568,-851,547,-865,526,-878,504,-890,482,-903,460,-914,437,-925,414,-936,391,-946,368,-955,344,-964,321,-972,297,-979,273,-986,248,-993,224,-999,199,-1004,175,-1008,150,-1012,125,-1016,100,-1019,75,-1021,50,-1022,25,-1023,0,-1023,-25,-1023,-50,-1022,-75,-1021,-100,-1019,-125,-1016,-150,-1012,-175,-1008,-199,-1004,-224,-999,-248,-993,-273,-986,-297,-979,-321,-972,-344,-964,-368,-955,-391,-946,-414,-936,-437,-925,-460,-914,-482,-903,-504,-890,-526,-878,-547,-865,-568,-851,-589,-837,-609,-822,-629,-807,-649,-791,-668,-775,-687,-758,-706,-741,-724,-724,-741,-706,-758,-687,-775,-668,-791,-649,-807,-629,-822,-609,-837,-589,-851,-568,-865,-547,-878,-526,-890,-504,-903,-482,-914,-460,-925,-437,-936,-414,-946,-391,-955,-368,-964,-344,-972,-321,-979,-297,-986,-273,-993,-248,-999,-224,-1004,-199,-1008,-175,-1012,-150,-1016,-125,-1019,-100,-1021,-75,-1022,-50,-1023,-25};


void loaddataforkernel(CGRA* cgra){
	cgra->datamems[0]->writeDatas(butterfly_i,0,LEN*2);
	cgra->datamems[2]->writeDatas(w,0,LEN);
}
void printresult(CGRA*cgra){
	std::cout<<"Print result:"<<std::endl;
	for(int i = 0; i<LEN*2;i++){
		std::cout<<"address = "<<i<<" data = "<<cgra->datamems[1]->readData(i)<<std::endl;
	} 
}


/*
 * j = 2
 * p = 2
 * q = 6
 * p_rindex = 4
 * p_iindex = 5
 * q_iindex =	13 
 * q_rindex = 12
 * w_rindex = 4
 * w_iindex = 5
 * out[5] = in[5] + ((in[12]*w[5] + w[4]*in[13])) = 
 *
 * Node8  4
 * Node9->CGRANode0->cycle21 load 0
 * Node11 5
 * Node12->CGRANode2->cycle23 load 0
 * Node14 12
 * Node15->CGRANode3->cycle22 load 1
 * Node17 13
 * Node18->CGRANode2->cycle24 load 0
 * Node20 4
 * Node21->CGRANode9->cycle20 load 0
 * Node23 5
 * Node24->CGRANode9->cycle21 load 0 should be -1023
 */
void fftkernel(int *in,int *w,int *out,int j, int k){
	int p = k+j;
	int q = k + j + (2>>1);
	int w_rindex = j*2;
	int w_iindex = j*2+1;
	int p_rindex = p*2;
	int p_iindex = p*2+1;
	int q_rindex = q*2;
	int q_iindex = q*2+1;
	
	int inpr = in[p_rindex];
	int inpi = in[p_iindex];
	int inqr = in[q_rindex];
	int inqi = in[q_iindex];
	int wr = w[w_rindex];
	int wi = w[w_iindex];
    out[p_rindex] = inpr + ((inqr *wr - inqi * wi)>>TIMES);
		out[p_iindex] = inpi + ((inqr* wi + wr*inqi)>>TIMES);
    out[q_rindex] = inpr + ((- inqr *wr + inqi * wi)>>TIMES);
		out[q_iindex] = inpi+(( - inqr* wi - wr*inqi)>>TIMES);
}

void checkresult(CGRA*cgra){
        for(int k=0;k<LEN;k+=2)
        {
        	for( int j=0;j<2/2;j++)
            {
							fftkernel(butterfly_i,w,butterfly_o,j,k);
            }
        }
	for(int i = 0; i<LEN*2;i++){
			if(butterfly_o[i] != cgra->datamems[1]->readData(i)){
				std::cout<<"sim result is different from the theoretical results"<<std::endl;
				std::cout<<"butterfly_o["<<i<<"]"<<" equal "<<cgra->datamems[1]->readData(i) << "shoule be "<<butterfly_o[i]<<std::endl;
				std::cout<<"Sim not PASS!"<<std::endl;
				std::cout<<"correct result should be:"<<std::endl;
				for(int j = 0; j<LEN*2;j++){
					std::cout<<"address = "<<j<<" data = "<<butterfly_o[j]<<std::endl;
				}
				return;
			}
	} 
	std::cout<<"Sim result equal theoretical results"<<std::endl;
	std::cout<<"Sim PASS!!!"<<std::endl;

}
